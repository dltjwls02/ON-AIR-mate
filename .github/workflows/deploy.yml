name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Print Prettier Version
      run: npx prettier --version

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma Client
      run: npx prisma generate

    - name: Run tests
      run: |
        npm run lint
        npm run check
        npm run build

    - name: Verify build
      run: test -f dist/app.js

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to EC2
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          set -e
          cd /home/ec2-user/on-air-mate
          
          # Store current disk usage
          DISK_BEFORE=$(df -h / | tail -1 | awk "{print \$5}")
          
          # Pull latest code
          git fetch origin main
          git reset --hard origin/main
          
          # AGGRESSIVE CLEANUP - Remove all non-essential files
          echo "Removing non-essential files..."
          
          # Remove all documentation
          rm -f *.md
          
          # Remove development and config files
          rm -rf .vscode scripts
          rm -f .env.example health_check.sh
          rm -f bucket-policy.json cors-config.json
          rm -f .eslintrc.json .prettierrc.json eslint.config.js
          
          # Remove any test files
          find src -name "*.test.ts" -delete 2>/dev/null || true
          find src -name "*.spec.ts" -delete 2>/dev/null || true
          
          # Remove logs and temp files
          find . -name "*.log" -delete 2>/dev/null || true
          find . -name ".DS_Store" -delete 2>/dev/null || true
          find . -name "Thumbs.db" -delete 2>/dev/null || true
          
          # Clean npm cache before install
          npm cache clean --force 2>/dev/null || true
          
          # Remove old node_modules and reinstall
          rm -rf node_modules
          
          # Set environment variables
          echo "Creating .env file..."
          echo "PORT=${{ secrets.PORT }}" > .env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}" >> .env
          chmod 600 .env
          
          # Install ALL dependencies (including devDependencies for build)
          echo "Installing all dependencies for build..."
          npm ci
          
          # Generate Prisma client
          npx prisma generate
          
          # Build TypeScript
          npm run build
          
          # Restart PM2 process
          pm2 delete onairmate-api 2>/dev/null || true
          pm2 start dist/app.js --name "onairmate-api" \
            --max-memory-restart 200M \
            --time
          
          # PM2 save 
          pm2 save
          
          pm2 logs --lines 5 --nostream
          
          # Health check
          sleep 10
          for i in {1..5}; do
            if curl -sf http://localhost:3000/health >/dev/null; then
              echo "Health check passed!"
              pm2 flush
              find /tmp -name "npm-*" -type d -mtime +0 -exec rm -rf {} + 2>/dev/null || true
              exit 0
            fi
            echo "Waiting for server to start... (attempt $i/5)"
            sleep 5
          done
          
          echo "Health check failed"
          pm2 logs --lines 20  # 실패 시 더 많은 로그 출력
          exit 1
                    
          # Clean system temp files
          find /tmp -name "npm-*" -type d -mtime +0 -exec rm -rf {} + 2>/dev/null || true
          
          # Show disk usage improvement
          DISK_AFTER=$(df -h / | tail -1 | awk "{print \$5}")
          echo "Disk usage: $DISK_BEFORE -> $DISK_AFTER"
        '

    - name: Verify deployment
      run: |
        sleep 5
        curl -sf http://${{ secrets.EC2_HOST }}:3000/health || exit 1
